*grapple.nvim.txt*          For NVIM v0.8.0         Last change: 2024 March 02

==============================================================================
Table of Contents                             *grapple.nvim-table-of-contents*

1. Grapple.nvim                                    |grapple.nvim-grapple.nvim|
  - Introduction                      |grapple.nvim-grapple.nvim-introduction|
  - Features                              |grapple.nvim-grapple.nvim-features|
  - Requirements                      |grapple.nvim-grapple.nvim-requirements|
  - Quickstart                          |grapple.nvim-grapple.nvim-quickstart|
  - Installation                      |grapple.nvim-grapple.nvim-installation|
  - Settings                              |grapple.nvim-grapple.nvim-settings|
  - Usage                                    |grapple.nvim-grapple.nvim-usage|
  - Tags                                      |grapple.nvim-grapple.nvim-tags|
  - Scopes                                  |grapple.nvim-grapple.nvim-scopes|
  - Grapple Windows                |grapple.nvim-grapple.nvim-grapple-windows|
  - PersistentState                |grapple.nvim-grapple.nvim-persistentstate|
  - Integrations                      |grapple.nvim-grapple.nvim-integrations|
  - Grapple Types                    |grapple.nvim-grapple.nvim-grapple-types|

==============================================================================
1. Grapple.nvim                                    *grapple.nvim-grapple.nvim*



_Theme: kanagawa_

Showcase ~

**Note**this showcase is slightly outdated, but aside from the command name
changes, it still represents how Grapple works.


INTRODUCTION                          *grapple.nvim-grapple.nvim-introduction*

Grapple is a plugin that aims to provide immediate navigation to important
files (and their last known cursor location). See the |grapple.nvim-quickstart|
section to get started.


FEATURES                                  *grapple.nvim-grapple.nvim-features*

- **Persistent** cursor tracking for tagged files
- **Scoped** file tagging for immediate navigation
- **Popup** windows to manage tags and scopes as regular text
- **Integration** with portal.nvim <https://github.com/cbochs/portal.nvim> for additional jump options


REQUIREMENTS                          *grapple.nvim-grapple.nvim-requirements*

- Neovim >= 0.9 <https://github.com/neovim/neovim/releases/tag/v0.9.0>


QUICKSTART                              *grapple.nvim-grapple.nvim-quickstart*

- |grapple.nvim-install| Grapple.nvim using your preferred package manager
- Add a keybind to `tag`, `untag`, or `toggle` a path. For example,

>lua
    vim.keymap.set("n", "<leader>m", "<cmd>Grapple toggle<cr>")
    vim.keymap.set("n", "<leader>M", "<cmd>Grapple open_tags<cr>")
<

**Next steps**

- Check out the default |grapple.nvim-settings|
- View your tags with `:Grapple open_tags`
- Choose a scope with `:Grapple open_scopes`
- Manage your loaded scopes with `:Grapple open_loaded`
- Add a |grapple.nvim-statusline-component|
- Explore the |grapple.nvim-grapple| and |grapple.nvim-scope| APIs


INSTALLATION                          *grapple.nvim-grapple.nvim-installation*

lazy.nvim ~

>lua
    { "cbochs/grapple.nvim" }
<

packer ~

>lua
    use { "cbochs/grapple.nvim" }
<

vim-plug ~

>vim
    Plug "cbochs/grapple.nvim"
<


SETTINGS                                  *grapple.nvim-grapple.nvim-settings*

The following are the default settings for Grapple. **Setup is not required**,
but settings may be overridden by passing them as table arguments to the
`grapple#setup` function.

Default Settings ~

>lua
    require("grapple").setup({
        ---Grapple save location
        ---@type string
        save_path = vim.fs.joinpath(vim.fn.stdpath("data"), "grapple"),
    
        ---Show icons next to tags or scopes in Grapple windows
        ---@type boolean
        icons = true,
    
        ---Highlight the current selection in Grapple windows
        ---Also, indicates when a tag path does not exist
        ---@type boolean
        status = true,
    
        ---Default scope to use when managing Grapple tags
        ---@type string
        scope = "git",
    
        ---User-defined scopes or overrides
        ---For more information, please see the Scopes section
        ---@type grapple.scope_definition[]
        scopes = {},
    
        ---User-defined tags title function for Grapple windows
        ---By default, uses the resolved scope's ID
        ---@type fun(scope: grapple.resolved_scope): string?
        tag_title = nil,
    
        ---User-defined scopes title function for Grapple windows
        ---By default, renders "Grapple Scopes"
        ---@type fun(): string?
        scope_title = nil,
    
        ---User-defined loaded scopes title function for Grapple windows
        ---By default, renders "Grapple Loaded Scopes"
        ---@type fun(): string?
        loaded_title = nil,
    
        ---Additional window options for Grapple windows
        ---See :h nvim_open_win
        ---@type grapple.vim.win_opts
        win_opts = {
            relative = "editor",
            width = 0.5,
            height = 10,
            row = 0.5,
            col = 0.5,
            border = "single",
            focusable = false,
            style = "minimal",
            title_pos = "center",
    
            -- Custom: "{{ title }}" will use the tag_title or scope_title
            title = "{{ title }}",
    
            -- Custom: adds padding around window title
            title_padding = " ",
        },
    })
<


USAGE                                        *grapple.nvim-grapple.nvim-usage*


GRAPPLE API ~

Grapple API and Examples ~

In general, the Grapple API is as follows:

**Lua**`require("grapple").{method}(opts)` **Command**`:Grapple [method]
[opts...]`

Where `opts` in the user command is a list of `value` arguments `key=value`
keyword arguments. For example,

>vim
    :Grapple cycle forward scope=cwd
<

Has the equivalent form

>lua
    require("grapple").cycle("forward", { scope = "cwd" })
<


GRAPPLE#TAG

Create a grapple tag.

**Command**`:Grapple tag [buffer={buffer}] [path={path}] [index={index}]
[name={name}] [scope={scope}]`

**API**`require("grapple").tag(opts)`

**opts?**|grapple.nvim-`grapple.options`|

- **buffer?**`integer` (default: `0`)
- **path?**`string`
- **index?**`integer`
- **name?**`string` **not implemented**
- **scope?**`string`

**Note**only one tag can be created _per scope per file_. If a tag already
exists for the given file or buffer, it will be overridden with the new tag.

Examples ~

>lua
    -- Tag the current buffer
    require("grapple").tag()
    
    -- Tag a file by its file path
    require("grapple").tag({ path = "some_file.lua" })
    
    -- Tag the current buffer in a different scope
    require("grapple").tag({ scope = "global" })
<


GRAPPLE#UNTAG

Remove a Grapple tag.

**API**`require("grapple").untag(opts)`

**opts?**|grapple.nvim-`grapple.options`| (one of)

**Note**Tag is removed based on one of (in order): `index`, `name`, `path`,
`buffer`

Examples ~

>lua
    -- Remove a tag on the current buffer
    require("grapple").untag()
    
    -- Remove a tag on a file
    require("grapple").untag({ file_path = "{file_path}" })
    
    -- Remove a tag on the current buffer in a different scope
    require("grapple").untag({ scope = "global" })
<


GRAPPLE#TOGGLE

Toggle a Grapple tag.

**API**`require("grapple").toggle(opts)`

**opts?**|grapple.nvim-`grapple.options`|

Examples ~

>lua
    -- Toggle a tag on the current buffer
    require("grapple").toggle()
<


GRAPPLE#SELECT

Select a Grapple tag.

**API**`require("grapple").select(opts)`

**opts?**|grapple.nvim-`grapple.options`| (one of)

**Note**Tag is selected based on one of (in order): `index`, `name`, `path`,
`buffer`

Examples ~

>lua
    -- Select the third tag
    require("grapple").select({ index = 3 })
<


GRAPPLE#EXISTS

**API**`require("grapple").exists(opts)`

**returns**`boolean`

**opts?**|grapple.nvim-`grapple.options`| (one of)

**Note**Tag is searched based on one of (in order): `index`, `name`, `path`,
`buffer`

Examples ~

>lua
    -- Check whether the current buffer is tagged or not
    require("grapple").exists()
    
    -- Check for a tag in a different scope
    require("grapple").exists({ scope = "global" })
<


GRAPPLE#CYCLE

Cycle through and select from the available tagged files in a scoped tag list.

**Command**`:Grapple cycle {direction} [opts...]`

**API**

- `require("grapple").cycle(direction, opts)`
- `require("grapple").cycle_backward(opts)`
- `require("grapple").cycle_forward(opts)`

**direction**`"backward"` | `"forward"`
**opts?**|grapple.nvim-`grapple.options`| (one of)

**Note**Starting tag is searched based on one of (in order): `index`, `name`,
`path`, `buffer`

Examples ~

>lua
    -- Cycle to the previous tagged file
    require("grapple").cycle_backward()
    
    -- Cycle to the next tagged file
    require("grapple").cycle_forward()
<


GRAPPLE#RESET

Clear all tags for a scope.

**Command**`:Grapple reset [scope={scope}] [id={id}]`

**API**`require("grapple").reset(opts)`

**opts?**`table`

- **scope?**`string` scope name
- **id?**`string` the ID of a resolved scope

Examples ~

>lua
    -- Reset the current scope
    require("grapple").reset()
    
    -- Reset a scope (dynamic)
    require("grapple").reset({ scope = "git" })
    
    -- Reset a specific resolved scope ID
    require("grapple").reset({ id = "~/git" })
<


GRAPPLE#QUICKFIX

Open the quickfix menu and populate the quickfix list with a project scopeâ€™s
tags.

**API**`require("grapple").quickfix(scope)`

**scope?**`string` (default: `settings.scope`)

Examples ~

>lua
    -- Open the quickfix menu for the current scope
    require("grapple").quickfix()
    
    -- Open the quickfix menu for a specified scope
    require("grapple").quickfix("global")
<


SCOPES API ~

Scope API and Examples ~


GRAPPLE#DEFINE_SCOPE

Create a user-defined scope.

**API**`require("grapple").define_scope(definition)`

**definition**|grapple.nvim-`grapple.scope_definition`|

Examples ~

>lua
    -- Define a scope during setup
    require("grapple").setup({
        scope = "home_dir",
    
        scopes = {
            {
                name = "home_dir",
                desc = "Home directory",
                cache = { debounce = 250 }
                resolver = function()
                    local path = vim.loop.cwd()
                    local id = path
                    return id, path, nil
                end
            }
        }
    })
    
    -- Define a scope outside of setup
    require("grapple").define_scope({
        name = "projects",
        desc = "Project directory"
        fallback = "cwd",
        cache = { event = "DirChanged" },
        resolver = function()
            local projects_dir = vim.fs.find("projects", {
                upwards = true,
                stop = vim.loop.os_homedir()
            })
    
            if #projects_dir == 0 then
                return nil, nil, "Not in projects dir"
            end
    
            local path = projects_dir[1]
            local id = path
            return id, path, nil
        end
    })
    
    -- Use the scope
    require("grapple").use_scope("projects")
<


GRAPPLE#USE_SCOPE

Change the currently selected scope.

**API**`require("grapple").use_scope(scope)`

**scope**`string` scope name

Examples ~

>lua
    -- Clear the cached value (if any) for the "git" scope
    require("grapple").use_scope("git_branch")
<


GRAPPLE#CLEAR_CACHE

Clear any cached value for a given scope.

**API**`require("grapple").clear_cache(scope)`

**scope?**`string` scope name (default: `settings.scope`)

Examples ~

>lua
    -- Clear the cached value (if any) for the "git" scope
    require("grapple").clear_cache("git")
<


TAGS                                          *grapple.nvim-grapple.nvim-tags*

A **tag** is a persistent tag on a path or buffer. It is a means of indicating
a file you want to return to. When a file is tagged, Grapple will save your
cursor location so that when you jump back, your cursor is placed right where
you left off. In a sense, tags are like file-level marks (||mark||).

Once a tag has been added to a |grapple.nvim-scope|, it may be selected by
index, cycled through, or jumped to using plugins such as portal.nvim
<https://github.com/cbochs/portal.nvim>.


SCOPES                                      *grapple.nvim-grapple.nvim-scopes*

A **scope** is a means of namespacing tags to a specific project. Scopes are
resolved dynamically to produce a unique identifier for a set of tags (i.e.Â a
root directory). This identifier determines where tags are created and deleted.
**Note**, different scopes may resolve the same identifier (i.e.Â `lsp` and
`git` scopes may share the same root directory).

Scopes can also be _cached_. Each scope may define a set of `events` and/or
`patterns` for an autocommand (||autocmd||), an `interval` for a timer, or to
be cached indefinitely (unless invalidated explicitly). Some examples of this
are the `cwd` scope which only updates on `DirChanged`.

The following scopes are made available by default:

- `global`tags are scoped to a global namespace
- `static`tags are scoped to neovimâ€™s initial working directory
- `cwd`tags are scoped to the current working directory
- `lsp`tags are scoped using the `root_dir` of the current bufferâ€™s attached LSP server, **fallback**`static`
- `git`tags are scoped to the current git repository, **fallback**`static`
- `git_branch`tags are scoped to the current git repository and branch, **fallback**`static`

It is also possible to create your own **custom scope**. See the
|grapple.nvim-scope-api| section for more information.

Examples ~

>lua
    -- Use a builtin scope
    require("grapple").setup({
        scope = "git_branch",
    })
    
    -- Define a custom scope
    require("grapple").setup({
        scope = "custom",
    
        scopes = {
            name = "custom",
            fallback = "cwd",
            cache = { event = "DirChanged" },
            resolver = function()
                local path = vim.env.HOME
                local id = path
                return id, path
            end
        }
    })
<


GRAPPLE WINDOWS                    *grapple.nvim-grapple.nvim-grapple-windows*

Popup windows are made available to enable easy management of tags and scopes.
The opened buffer is given its own syntax (`grapple`) and file type (`grapple`)
and can be modified like a regular buffer; meaning items can be selected,
modified, reordered, or deleted with well-known vim motions. The floating
window can be closed with either `q` or `<esc>`.


TAGS WINDOW ~



Open a floating window with all the tags for a given scope. This buffer is
modifiable. Several actions are available by default:

- **Selection** (`<cr>`): select the tag under the cursor
- **Split (horizontal)** (`-`): select the tag under the cursor (`split`)
- **Split (vertical)** (`|`): select the tag under the cursor (`vsplit`)
- **Quick select** (`1-9`): select the tag at a given index
- **Deletion**delete a line to delete the tag
- **Reordering**move a line to move a tag
- **Quickfix** (`<c-q>`): send all tags to the quickfix list (||quickfix||)

**API**

- `require("grapple").open_tags(opts)`
- `require("grapple").toggle_tags(opts)`

**opts?**`table`

- **scope?**`string` scope name
- **id?**`string` the ID of a resolved scope

Examples ~

>lua
    -- Open the tags window for the current scope
    require("grapple").open_tags()
    
    -- Open the tags window for a different scope
    require("grapple").open_tags("global")
<


SCOPES WINDOW ~



Open a floating window with all defined scopes. This buffer is not modifiable.
Some basic actions are available by default:

- **Selection** (`<cr>`): set the current scope to the one under the cursor

**API**

- `require("grapple").open_scopes()`
- `require("grapple").toggle_scopes()`

Examples ~

>lua
    -- Open the scopes window
    require("grapple").open_scopes()
<


LOADEDSCOPES WINDOW ~



Open a floating window with all loaded scopes. This buffer is not modifiable.
Some basic actions are available by default:

- **Selection** (`<cr>`): open the tags window for the loaded scope under the cursor
- **Deletion (x)**reset the tags for the loaded scope under the cursor

**API**

- `require("grapple").open_loaded()`
- `require("grapple").toggle_loaded()`

Examples ~

>lua
    -- Open the scopes window
    require("grapple").open_loaded()
<


PERSISTENTSTATE                    *grapple.nvim-grapple.nvim-persistentstate*

Grapple saves all scopes to a common directory. The default directory is named
`grapple` and lives in Neovimâ€™s `"data"` directory (||standard-path||). Each
scope will be saved as its own individually serialized JSON blob.

By default, no scopes are loaded on startup. When `require("grapple").setup()`
is called, the default scope will be loaded. Otherwise, scopes will be loaded
on demand.


INTEGRATIONS                          *grapple.nvim-grapple.nvim-integrations*


TELESCOPE ~

You can use telescope to search through your tagged files instead of the built
in popup windows.

Load the extension with

>lua
    require("telescope").load_extension("grapple")
<

Then use this command to see the grapple tags for the project in a telescope
window

>vim
    :Telescope grapple tags
<


STATUSLINE ~

A statusline component can be easily added to show whether a buffer is tagged.

**lualine.nvim statusline**

>lua
    require("lualine").setup({
        sections = {
            lualine_b = {
                {
                    require("grapple").statusline,
                    cond = require("grapple").exists
                }
            }
        }
    })
<


GRAPPLE TYPES                        *grapple.nvim-grapple.nvim-grapple-types*

Type Definitions ~


GRAPPLE.OPTIONS ~

Options available for most top-level tagging actions (e.g.Â tag, untag, select,
toggle, etc).

**Type**`table`

- **buffer**`integer` (default: `0`)
- **path**`string` file path or URI (overrides `buffer`)
- **name**`string` tag name
- **index**`integer` tag insertion or deletion index (default: end of list)
- **scope**`string` scope name (default `settings.scope`)


GRAPPLE.CACHE.OPTIONS ~

Options available for defining how a scope should be cached.

**Type**`table`

- **event?**`string` | `string[]` autocmd event (||autocmd||)
- **pattern?**`string` autocmd pattern, useful for `User` events
- **interval?**`integer` timer interval
- **debounce?**`integer` debounce interval


GRAPPLE.SCOPE_DEFINITION ~

Used for defining new scopes.

**Type**`table`

- **name**`string` scope name
- **desc**`string` scope description
- **resolver**|grapple.nvim-`grapple.scope_resolver`|
- **fallback?**`string` fallback scope name
- **cache?**|grapple.nvim-`grapple.cache.options`| | `boolean`


GRAPPLE.SCOPE_RESOLVER ~

Used for defining new scopes. Must return a tuple of `(id, path, err)`. If
successful, an `id` must be provided with an optional absolute path `path`. If
unsuccessful, `id` must be `nil` with an optional `err` explaining what when
wrong.

**Type**`function`

**Returns**`string? id, string? path, string? err`


GRAPPLE.RESOLVED_SCOPE ~

Result from observing a scope at a point in time.

**Type** `class`

- **name**`string` scope name
- **id**`string` resolved scope ID
- **path**`string` | `nil` resolved scope path
- **:tags()**returns all tags for the given ID

==============================================================================
2. Links                                                  *grapple.nvim-links*

1. *grapple_showcase*: https://user-images.githubusercontent.com/2467016/207667062-13883515-fd21-4d40-be87-656665de3d0e.gif

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
